# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'optionsGraph.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtCore import Qt
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QCompleter, QTableWidgetItem
import numpy as np
from dataComps.Constants import Constants, OrderType
from dataComps.DataStructures import DetailObject
from AppLauncherWindow import AppLauncherWindow
import sys
import threading
from uiComps.Logging import Logger

from dataComps.ibFTPdata import downloadShortData


from apps.listManaging.listManager import ListManager
from apps.dataDownloading.dataDownloader import DataDownloader
from apps.optionPositions.optionsPositionListing import OptionPositions
from apps.movers.moversLists import MoversList
from apps.stairstepping.stairstepper import StairStepper
from apps.rsitracking.rsitracker import RSITracker
from apps.positionManaging.positionManager import PositionManager

from dataComps.HistoricalDataManagement import HistoricalDataManager
from dataComps.dataManagement import DataManager, SymbolDataManager
from uiComps.QHelper import SymbolCompleter

class AppLauncher(AppLauncherWindow):

    next_id = 0

    data_management = None

    def __init__(self):
        super().__init__()
        
        Logger.instance().setLogWindow(self.log_window)
        
        self.real_button.setChecked(True)
        self.radioSelection()
        self.updateConnectionStatus()

        self.data_printer = DataFeedback(self)


    def updateConnectionStatus(self):
        if self.data_management is not None:
            if self.data_management.connectionIsOpen():
                self.statusbar.showMessage("Connection Open")
                self.toggleAppButtons(True)
                return

        self.statusbar.showMessage("Offline")


    def setTradingOptions(self, local_address, trading_socket, editable):
        self.address_line.setText(local_address)
        self.socket_line.setText(str(trading_socket))
        self.address_line.setEnabled(editable)
        self.socket_line.setEnabled(editable)

    def radioSelection(self):
        if self.real_button.isChecked():
            self.setTradingOptions(Constants.LOCAL_ADDRESS, Constants.TRADING_SOCKET, False)
        elif self.paper_button.isChecked():
            self.setTradingOptions(Constants.LOCAL_ADDRESS, Constants.PAPER_SOCKET, False)
        elif self.custom_button.isChecked():
            self.setTradingOptions("", "", True)

    def openOptionsApp(self):
        self.new_app = OptionPositions(self.data_management.ib_interface)
        self.new_app.show()
        
    def openStocksApp(self):
        self.new_app = PositionManager(self.data_management.ib_interface)
        self.new_app.show()
        
    def openDownloaderApp(self):
        symbol_manager = SymbolDataManager(printer=self.data_printer)
        symbol_manager.openConnection(self.address_line.displayText(), int(self.socket_line.displayText()), client_id=self.next_id)
        self.next_id += 1
        symbol_manager.start()

        history_manager = HistoricalDataManager(printer=self.data_printer)
        history_manager.openConnection(self.address_line.displayText(), int(self.socket_line.displayText()), client_id=self.next_id)
        self.next_id += 1
        history_manager.start()

        self.new_app = DataDownloader(symbol_manager, history_manager)
        self.new_app.show()

    def openMoversApp(self):

        history_manager = HistoricalDataManager(printer=self.data_printer)
        history_manager.openConnection(self.address_line.displayText(), int(self.socket_line.displayText()), client_id=self.next_id)
        self.next_id += 1
        history_manager.start()

        self.new_app = MoversList(history_manager)
        self.new_app.show()


    def openStepperApp(self):

        history_manager = HistoricalDataManager(printer=self.data_printer)
        history_manager.openConnection(self.address_line.displayText(), int(self.socket_line.displayText()), client_id=self.next_id)
        self.next_id += 1
        history_manager.start()

        self.new_app = StairStepper(history_manager)
        self.new_app.show()


    def openRSIApp(self):

        history_manager = HistoricalDataManager(printer=self.data_printer)
        history_manager.openConnection(self.address_line.displayText(), int(self.socket_line.displayText()), client_id=self.next_id)
        self.next_id += 1
        history_manager.start()

        self.new_app = RSITracker(history_manager)
        self.new_app.show()


    def openSymbolLookup(self):
        self.new_app = ListManager(self.data_management.ib_interface)
        self.new_app.show()

    
    def openConnection(self):
        self.data_management = DataManager(self.dataUpdate, printer=self.data_printer)
        self.data_management.openConnection(self.address_line.displayText(), int(self.socket_line.displayText()), client_id=self.next_id)
        self.next_id += 1
        self.data_management.start()

    def downloadShortRateData(self):
        downloadShortData("data/")

    def dataUpdate(self, signal):
        print(f"AppLauncher.dataUpdate: {signal}")
        self.updateConnectionStatus()

    def printToConsole(self, line):
        self.log_window.appendPlainText(line)



class DataFeedback:

    def __init__(self, delegate):
        self.delegate = delegate


    def addLine(self, line):
        self.delegate.printToConsole(line)



if __name__ == "__main__":

    app = QtWidgets.QApplication(sys.argv)
    app.aboutToQuit.connect(app.deleteLater)
    window = AppLauncher()
    window.show()
    sys.exit(app.exec_())



