# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'optionsGraph.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtCore import Qt
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QCompleter
import numpy as np
from Constants import Constants, OrderType
from UIComps.VisualizationWindow import VisualizationWindow
import sys
import threading
import pandas as pd

from dataManagement import DataManager
from QHelper import SymbolCompleter


class OptionVisualization(VisualizationWindow):


    option_type = Constants.CALL_TYPE
    order_type = OrderType.single


    def __init__(self, ib_interface=None):
        super().__init__()
        self.statusBar().showMessage('Offline')
        self.setupBoxActions()
        self.setStrikeBoxes(self.order_type)
        self.setDefaults(self.option_type)


    def structureBoxChanged(self, value):
        self.order_type = OrderType(value)
        self.setStrikeBoxes(self.order_type)
    

    def setStrikeBoxes(self, order_type):
        if order_type == OrderType.butterfly:
            self.boxEnabling(True, True, True)
        elif order_type == OrderType.single:
            self.boxEnabling(False, True, False)
        elif order_type == OrderType.vertical_spread:
            self.boxEnabling(False, True, True)
            self.data_management.fetchSpreads()
        elif order_type == OrderType.bw_butterfly:
            self.boxEnabling(True, True, True)
    
    def setupBoxActions(self):
        self.expiration_box.currentIndexChanged.connect(self.expirationBoxChanged)
        self.structure_type.currentTextChanged.connect(self.structureBoxChanged)
        self.lower_box.valueChanged.connect(self.spinboxChange)
        self.snapshot_button.stateChanged.connect(self.snapshotChange)


    def spinboxChange(self, value):
        print("Value ", str(value))


    def snapshotChange(self, value):
        self.data_management.snapshot = value


    def fetchForSymbol(self, symbol_name):
        self.symbol_completer.refreshModel()
        self.data_management.requestContractDetails(symbol_name)


    def fetchContractsFor(self, contractDetails):
        self.symbol_label.setText(contractDetails.long_name + ' (' + contractDetails.exchange + ')')
        self.data_management.fetchContractsFor(contractDetails)
            
    def openConnection(self):
        self.data_management = DataManager(self.dataUpdate)
        self.data_management.openConnection()
        self.data_management.start()


    def isPaperTrading(self):
        return self.paper_trading_button.isChecked()


    def snap(self):
        return self.snapshot_button.isChecked()


    def optionStyleChanged(self, new_style):
        self.option_type = new_style
        self.data_management.optionStyleChangedTo(new_style)


    def expirationBoxChanged(self, value):
        self.data_management.setExpirationSelection(value)


    def dataUpdate(self, signal):
        print(f"OptionVisualization.dataUpdate: {signal}")
        if signal == Constants.OPTION_INFO_LOADED:
            self.updateOptionGUI()
            self.data_management.requestOptionData(self.option_type)
        elif signal == Constants.OPTION_PRICE_UPDATE:
            self.updatePlot(self.data_management.getDataFrames(), self.option_type)
        elif signal == Constants.UNDERLYING_PRICE_UPDATE:
            self.updatePrice()
        elif signal == Constants.CONTRACT_DETAILS_FINISHED:
            self.fetchItemsForList()
            self.symbol_completer.complete()
        elif signal == Constants.CONTRACT_DETAILS_RETRIEVED:
            self.fetchItemsForList()
        elif signal == Constants.CONNECTION_STATUS_CHANGED:
            self.connectionStatusUpdated()

    def fetchItemsForList(self):
        while self.data_management.hasNewItem():
            self.symbol_completer.addToList(self.data_management.getLatestItem())
            self.symbol_completer.complete()


    def updatePrice(self):
        if not(self.data_management.previous_price == None):
            if self.data_management.previous_price > self.data_management.price:
                self.price_label.setText('<font color="red">' + str(self.data_management.price) + '</font>')
            else:
                self.price_label.setText('<font color="green">' + str(self.data_management.price) + '</font>')
        else:
            self.price_label.setText(str(self.data_management.price))

        self.updatePlotPrice(self.data_management.price)


    def updateStrikeSelection(self, selected_strike):
        print('Selected Strike')
        print(selected_strike)
        self.middle_box.setStrike(selected_strike)
        self.data_management.updateStrikeSelection(selected_strike)


    def connectionStatusUpdated(self):
        if self.data_management.connectionIsOpen():
            self.connect_button.setText("Disconnect")
            self.statusBar().showMessage('Connected')


    def updateOptionGUI(self):
        self.populateExpirationBox()
        self.populateStrikes()
        self.enableInterface()


    def populateStrikes(self):
        self.upper_box.setStrikes(self.data_management.getStrikes())
        self.lower_box.setStrikes(self.data_management.getStrikes())
        self.middle_box.setStrikes(self.data_management.getStrikes())


    def populateExpirationBox(self):
        self.expiration_box.clear()
        self.expiration_box.addItems(self.data_management.getExpirationStrings())


    def setupActions(self):
        self.search_field.textChanged.connect(lambda: self.fieldUpdate(Constants.SYMBOL_CHANGE))
        self.call_put_group.buttonClicked.connect(self.radioButtonAction)
        self.connect_button.clicked.connect(self.openConnection)
        self.middle_box.valueChanged.connect(self.strikePriceChange)

        self.symbol_completer = SymbolCompleter(self)
        self.search_field.setCompleter(self.symbol_completer)


    def strikePriceChange(self, value):
        pass

    def radioButtonAction(self, value):
        if value == self.put_button and self.option_type == Constants.CALL_TYPE:
            self.optionStyleChanged(Constants.PUT_TYPE)
        elif value == self.call_button and self.option_type == Constants.PUT_TYPE:
            self.optionStyleChanged(Constants.CALL_TYPE)
        

    def fieldUpdate(self, action_type):
        if action_type == Constants.SYMBOL_CHANGE:
            self.fetchForSymbol(self.search_field.text())



if __name__ == "__main__":

    app = QtWidgets.QApplication(sys.argv)
    app.aboutToQuit.connect(app.deleteLater)
    window = OptionVisualization()
    window.show()
    app.exec_()

