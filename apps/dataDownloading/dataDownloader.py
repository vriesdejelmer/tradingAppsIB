
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'optionsGraph.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtCore import Qt
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QCompleter, QTableWidgetItem
import numpy as np
from dataComps.Constants import Constants, OrderType
from .DataDownloaderWindow import DataDownloaderWindow
import sys, threading
import datetime
import pandas as pd
from PyQt5.QtWidgets import QCompleter

from dataComps.dataManagement import SymbolDataManager
from dataComps.UserDataManagement import writeStockList, readStockList, getStockListNames


class DataDownloader(DataDownloaderWindow):

    current_contract = None

    def __init__(self, symbol_manager, history_manager):
        super().__init__()
        self.symbol_manager = symbol_manager
        self.symbol_manager.data_updater.connect(self.dataUpdate)
        self.history_manager = history_manager
        self.history_manager.data_updater.connect(self.dataUpdate)

    def selectedContract(self, contractDetails):
        self.current_contract = contractDetails

    def returnSelection(self):
        pass


    def fetchHistoricalData(self):
        start_date = self.start_date_widget.selectedDate().toPyDate()
        print(f"#####Date type is {type(start_date)}")
        end_date = self.end_date_widget.selectedDate().toPyDate()
        if self.current_contract is not None:
            self.history_manager.fetchAndStoreBars(self.current_contract, start_date, end_date, self.bar_combobox.currentText())

    def dataUpdate(self, signal):
        super().dataUpdate(signal)

        if signal == Constants.HISTORICAL_DATA_FETCH_COMPLETE:
            self.saveData()


    def saveData(self, separately=False):
        
        self.history_manager.historicalDF.sort_index(inplace=True)
        file_name = './data/downloads/' + self.current_contract.symbol + '_daily.csv'
        self.history_manager.historicalDF.to_csv(file_name)

        