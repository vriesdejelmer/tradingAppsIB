# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'optionsGraph.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtCore import Qt
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QCompleter, QTableWidgetItem
import numpy as np
from dataComps.Constants import Constants, OrderType
from .ListManagerWindow import ListManagerWindow
import sys, threading
import pandas as pd
from PyQt5.QtWidgets import QCompleter

from dataComps.dataManagement import SymbolDataManager

from dataComps.UserDataManagement import writeStockList, readStockList, getStockListNames

class ListManager(ListManagerWindow):


    def __init__(self, ib_interface):
        super().__init__()
        self.symbol_manager = SymbolDataManager(self.dataUpdate, ib_interface)

        self.loadData()
        self.fillOutTable()

    def loadData(self):
        self.stock_lists = getStockListNames()

        if len(self.stock_lists) == 0:
            self.createBaseStockList()
        else:
            for _, list_name in self.stock_lists:
                self.list_selector.addItem(list_name)
            
            print("Coming through here?")

            file_name, _ = self.stock_lists[0]
            self.stock_list = readStockList(file_name)


    def createBaseStockList(self):
        list_name = "Watch List"
        self.stock_lists = [(None, list_name)]
        self.list_selector.addItem(list_name)
        self.stock_list = dict()

    def createNewList(self):
        new_list_name = self.list_name_field.text()
        self.list_name_field.setText("")
        if new_list_name != "":
            self.stock_lists.insert(0, (None, new_list_name))
            self.list_selector.insertItem(0, new_list_name)
            self.list_selector.setCurrentIndex(0)
            self.stock_list = dict()


    def fillOutTable(self):
    
        for index, (key, details) in enumerate(self.stock_list.items()):
            
            print(f"{index}, {key}, {details}")
            self.addRowAt(index, key, details) 


    def listSelection(self, value):
        self.stock_table.clearContents()
        self.stock_table.setRowCount(0)
        
        print(f"This should be it no? {type(self.stock_lists)}")
        print(self.stock_lists)
        file_name, _ = self.stock_lists[value]
        print(file_name)
        if file_name is not None:
            self.stock_list = readStockList(file_name)
            self.fillOutTable()


    def saveStockList(self):

        current_index = self.list_selector.currentIndex()
        file_name, list_name = self.stock_lists[current_index]
        writeStockList(self.stock_list, list_name, file_name)


